generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id              Int              @id @default(autoincrement())
  name            String
  email           String           @unique
  advisors        Advisor[]
  certificates    Certificate[]
  diplomas        Diploma[]
  graduationLists GraduationList[]
  students        Student[]
}

model Advisor {
  id           Int        @id @default(autoincrement())
  name         String
  email        String     @unique
  type         String
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  students     Student[]

  @@index([departmentId])
}

model Student {
  id              Int                       @id @default(autoincrement())
  name            String
  email           String                    @unique
  departmentId    Int
  advisorId       Int
  certificates    Certificate[]
  diplomas        Diploma[]
  advisor         Advisor                   @relation(fields: [advisorId], references: [id])
  department      Department                @relation(fields: [departmentId], references: [id])
  graduationLists StudentOnGraduationList[]
  transcript      Transcript?

  @@index([departmentId])
  @@index([advisorId])
}

model Transcript {
  id                         Int      @id @default(autoincrement())
  creditsCompleted           Int
  compulsoryCoursesCompleted Int
  ects                       Float
  studentId                  Int      @unique
  gpa                        Float    @default(0.0)
  Course                     Course[]
  student                    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
}

model Diploma {
  id           Int           @id @default(autoincrement())
  issueDate    DateTime
  studentId    Int
  departmentId Int
  certificates Certificate[]
  department   Department    @relation(fields: [departmentId], references: [id])
  student      Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([departmentId])
}

model Certificate {
  id           String     @id @default(cuid())
  type         String
  issueDate    DateTime
  studentId    Int
  departmentId Int
  diplomaId    Int?
  department   Department @relation(fields: [departmentId], references: [id])
  diploma      Diploma?   @relation(fields: [diplomaId], references: [id])
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([departmentId])
  @@index([diplomaId])
}

model GraduationList {
  id           Int                       @id @default(autoincrement())
  departmentId Int
  department   Department                @relation(fields: [departmentId], references: [id])
  students     StudentOnGraduationList[]

  @@index([departmentId])
}

model StudentOnGraduationList {
  studentId        Int
  graduationListId Int
  graduationList   GraduationList @relation(fields: [graduationListId], references: [id], onDelete: Cascade)
  student          Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@id([studentId, graduationListId])
  @@index([graduationListId])
}

model Course {
  id           Int        @id @default(autoincrement())
  code         String
  name         String
  credits      Int
  grade        String
  transcriptId Int
  Transcript   Transcript @relation(fields: [transcriptId], references: [id], onDelete: Cascade)

  @@index([transcriptId])
}
